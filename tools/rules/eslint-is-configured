#!/usr/bin/env node

const fs = require('node:fs/promises')
const Path = require('node:path')

const main = async () => {
  const packageJson = await fs.readFile('package.json', 'utf8')
  const packageObj = JSON.parse(packageJson)

  const versionsJson = await fs.readFile(
    Path.join(__dirname, '../versions.json')
  )
  const versions = JSON.parse(versionsJson)

  if (
    packageObj.devDependencies &&
    packageObj.devDependencies['eslint-config-eda'] &&
    packageObj.eslintConfig
  ) {
    delete packageObj.devDependencies['eslint-config-eda']
    packageObj.devDependencies['@devacademy/eslint-config'] =
      versions['@devacademy/eslint-config']

    const eslint = packageObj.eslintConfig
    switch (eslint.extends) {
      case 'eda/core':
        eslint.extends = '@devacademy/eslint-config/core'
        break

      case 'eda':
        eslint.extends = '@devacademy'
        break

      case 'eda/react':
        eslint.extends = '@devacademy/eslint-config/react'
        break

      default:
        throw new Error(`Unexpected eslintConfig.extends ${eslint.extends}`)
    }
    process.stderr.write(`Outdated eslintConfig detected\n`)

    if (process.argv.slice(2).includes('--fix')) {
      const newJson = JSON.stringify(packageObj, null, 2) + '\n'
      await fs.writeFile('package.json', newJson, 'utf8')
      process.stderr.write(`eslintConfig updated\n`)
    }

    process.exitCode = 1
  }
}

main().catch((e) => {
  process.exitCode = 1
  console.error(`eslint-is-configured failed: ${e}`)
})
