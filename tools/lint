#!/usr/bin/env node
const { existsSync } = require('node:fs')
const FS = require('node:fs/promises')
const Path = require('node:path/posix')

const main = async () => {
  const fix = process.argv.slice(2).includes('--fix')

  const versions = JSON.parse(
    await FS.readFile(Path.join(__dirname, './versions.json'))
  )

  const rules = (await FS.readdir(Path.join(__dirname, 'rules')))
    .map((filename) => filename.replace(/\.js$/, ''))
    .map((name) => ({ name, check: require(`./rules/${name}`) }))

  const packages = await FS.readdir(Path.join(__dirname, '../packages'))
  let failed = false

  for (const package of packages) {
    const path = Path.resolve(__dirname, '../packages', package)
    const packagePath = Path.join(path, 'package.json')
    if (!existsSync(packagePath)) {
      process.stderr.write(`INFO: no package.json file: ${path}\n`)
      continue
    }

    try {
      const packageJson = await FS.readFile(packagePath, 'utf-8')
      const packageObj = JSON.parse(packageJson)
      for (const rule of rules) {
        try {
          const result = await rule.check({
            package: packageObj,
            path,
            versions,
            fix,
          })

          if (fix && result && typeof result === 'object') {
            const json = JSON.stringify(result, null, 2)
            await FS.writeFile(packagePath, json, 'utf-8')
          }
        } catch (e) {
          process.stderr.write(
            `rule ${rule.name} failed for ${package}: ${e}\n`
          )
        }
      }
    } catch (e) {
      process.stderr.write(`failed to read/parse file: ${path} ${e}\n`)
    }
  }

  if (failed) {
    process.stderr.write(`lint failed\n`)
    process.exitCode = 1
  }
}

main().catch((e) => {
  process.stderr.write(`lint failed: ${e}\n`)
  process.exitCode = 1
})
